// coverage:ignore-file
library;

import 'package:easy_localization/easy_localization.dart';

part 'net_resp_exception.dart';

/// Base class for all all client-side errors that can be generated by the app
sealed class AppException implements Exception {
  const AppException(this.code, this.message);

  final String message;
  final int code;

  // ! Why don't just Exception(-1, "nope_exception".tr()) directly?
  // ! If that's the case then the Exceptions can't be const, which is not what we're looking for.
  // ! So then, if using the toString() approach, how to track the necessary tr() in the json?
  // !
  // ! 1) Manually
  // ! 2) Remove const temporarily, then use the .tr() directly, track them, then remove
  // !    them back to normal.
  // !
  // ! For now we stick with the latter option.
  // TODO number 1

  // To use translation third party would be just:
  // @override
  // Future<String> toString() async => await translate(APP_STRINGS[message] ?? "ERROR");

  // To use hardcoded localization would be:
  @override
  String toString() => message.tr();

  @override
  bool operator ==(covariant AppException other) {
    if (identical(this, other)) return true;

    return other.message == message && other.code == code;
  }

  @override
  int get hashCode {
    return message.hashCode ^ code.hashCode;
  }
}

class UnknownException extends AppException {
  const UnknownException() : super(-1, 'unknown_error');
}

class CustomException extends AppException {
  const CustomException(this._msg) : super(-2, _msg);
  // ignore: unused_field
  final String _msg;

  /// Will just return the original message since, it does not support localization
  /// from the [AppException] directly.
  @override
  String toString() => _msg;
}

/// Might you wonder why this is not network response exception, the reason is because this
/// kind of exception happen client-side.
class NoConnectionException extends AppException {
  const NoConnectionException() : super(-3, 'no_internet_connection');
}

class EmailAlreadyInUseException extends AppException {
  const EmailAlreadyInUseException() : super(-4, 'email_already_in_use');
}

class UpdateCheckException extends AppException {
  // Update check failed. Please try again later.
  const UpdateCheckException() : super(-5, 'update_check_failed');
}

// TODO expand this, and figure the messageKey to messageStr, and support for localization.
